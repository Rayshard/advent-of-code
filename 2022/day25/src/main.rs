use std::{
    fs::File,
    io::{self, BufRead, BufReader},
};

fn snafu_digit_to_decimal_digit(c: char) -> i128 {
    match c {
        '0' => 0,
        '1' => 1,
        '2' => 2,
        '-' => -1,
        '=' => -2,
        c => panic!("{c}"),
    }
}

fn snafu_to_decimal(string: &str) -> i128 {
    string
        .chars()
        .rev()
        .enumerate()
        .map(|(i, c)| snafu_digit_to_decimal_digit(c) * 5i128.pow(i as u32))
        .sum()
}

fn add_snafu(a: &str, b: &str) -> String {
    let (a, b) = match a.len().cmp(&b.len()) {
        std::cmp::Ordering::Less => {
            let mut prefixed_a = std::iter::repeat('0')
                .take(b.len() - a.len())
                .collect::<String>();
            prefixed_a.push_str(a);

            (prefixed_a, b.to_string())
        }
        std::cmp::Ordering::Equal => (a.to_string(), b.to_string()),
        std::cmp::Ordering::Greater => {
            let mut prefixed_b = std::iter::repeat('0')
                .take(a.len() - b.len())
                .collect::<String>();
            prefixed_b.push_str(b);

            (a.to_string(), prefixed_b)
        }
    };

    let mut carry = '0';
    let mut result = String::new();

    for (a, b) in a.chars().rev().zip(b.chars().rev()) {
        let (fives_place, ones_place) = match (carry, a, b) {
            ('0', '0', '0') => ('0', '0'),
            ('-', '-', '-') => ('-', '2'),
            ('1', '1', '1') => ('1', '='),
            ('-', '2', '2') => ('1', '='),
            ('1', '2', '2') => ('1', '0'),
            ('-', '2', '0') | ('-', '0', '2') | ('0', '-', '2') | ('0', '2', '-') => ('0', '1'),
            ('1', '=', '1') | ('1', '1', '=') => ('0', '0'),
            ('1', '2', '-') | ('1', '-', '2') => ('0', '2'),
            ('-', '2', '=') | ('-', '=', '2') => ('0', '-'),
            ('-', '-', '2') | ('-', '2', '-') => ('0', '0'),
            ('1', '-', '1') | ('-', '1', '1') | ('1', '1', '-') => ('0', '1'),
            ('0', '=', '-') | ('0', '-', '=') | ('-', '=', '0') | ('-', '0', '=') => ('-', '2'),
            ('0', '=', '=') => ('-', '1'),
            ('-', '=', '=') => ('-', '0'),
            ('-', '-', '=') | ('-', '=', '-') => ('-', '1'),
            ('1', '-', '=') | ('1', '=', '-') | ('-', '1', '=') | ('-', '=', '1') => ('0', '='),
            ('0', '-', '-') | ('-', '0', '-') | ('-', '-', '0') => ('0', '='),
            ('0', '=', '2') | ('0', '2', '=') => ('0', '0'),
            ('1', '=', '0') | ('1', '0', '=') | ('0', '=', '1') | ('0', '1', '=') => ('0', '-'),
            ('1', '2', '1') | ('1', '1', '2') => ('1', '-'),
            ('1', '-', '-') | ('-', '1', '-') | ('-', '-', '1') => ('0', '-'),
            ('-', '2', '1') | ('-', '1', '2') => ('0', '2'),
            ('0', '1', '2') | ('0', '2', '1') | ('1', '2', '0') | ('1', '0', '2') => ('1', '='),
            ('-', '1', '0')
            | ('1', '-', '0')
            | ('1', '0', '-')
            | ('0', '1', '-')
            | ('0', '-', '1')
            | ('-', '0', '1') => ('0', '0'),
            ('0', '1', '1') | ('1', '0', '1') | ('1', '1', '0') => ('0', '2'),
            ('0', '0', '-') | ('0', '-', '0') | ('-', '0', '0') => ('0', '-'),
            ('0', '0', '1') | ('0', '1', '0') | ('1', '0', '0') => ('0', '1'),
            ('0', '0', '=') | ('0', '=', '0') => ('0', '='),
            ('0', '0', '2') | ('0', '2', '0') => ('0', '2'),
            ('0', '2', '2') => ('1', '-'),
            ('1', '=', '=') => ('-', '2'),
            ('1', '=', '2') | ('1', '2', '=') => ('0', '1'),

            digits => todo!("{digits:?}"),
        };

        result.push(ones_place);
        carry = fives_place;
    }

    if carry != '0' {
        result.push(carry);
    }

    result.chars().rev().collect()
}

fn main() -> io::Result<()> {
    let file = File::open("input.txt")?;
    let reader = BufReader::new(file);

    let sum = reader
        .lines()
        .fold("0".to_string(), |acc, x| add_snafu(&acc, &x.unwrap()));

    println!("{}", sum);

    Ok(())
}
